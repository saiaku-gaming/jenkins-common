#!groovy

// Sonar Settings
final sonarScannerVersion="3.4.0.905"
final SONAR_HOST="http://some-sonar"
final sonarJavaBinaries="../**/target/classes"
final sonarJacocoReportPaths="target/jacoco.exec"
final sonarSurefireReportsPath="target/surefire-reports"
final sonarSourceEncoding="UTF-8"
final sonarExclusions = ""
final dockerRepository = "registry.valhalla-game.com"

pipeline {
    agent any

    stages {
        stage('Prepare') {
            steps {
                git(branch: "$BRANCH_NAME",
                        url: scm.userRemoteConfigs[0].url,
                        credentialsId: '${some-credential-id}')
                script {
                    gitCommit = sh(
                            script: 'git rev-parse HEAD',
                            returnStdout: true
                    ).trim().take(10)

                    gitDate = sh(
                            script: 'git show -s --format=%cd --date=short HEAD',
                            returnStdout: true
                    ).trim()

                    artifactId = readMavenPom(file: 'pom.xml').getArtifactId()
                    version = readMavenPom(file: 'pom.xml').getVersion()

                    echo " ***** Build name:         $currentBuild.displayName"
                    echo " ***** Client Version: $version"

                    echo 'Environment Parameters:'
                    sh 'printenv'
                }
            }
        }

        stage('mvn install') {
            steps {
                //lock(resource: "MAVEN_REPO") {
                sh "mvn -f ./pom.xml clean install"
                //}
            }
        }

//        stage('Sonar') {
//            steps {
//                lock(resource: "MAVEN_REPO") {
//                    print "Sonar running against $SONAR_HOST"
//                    withSonarQubeEnv('Sonar') {
//                        sh "mvn -B -f ./build/pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:$sonarScannerVersion:sonar " +
//                                "-Dsonar.branch=$BRANCH_NAME " +
//                                "-Dsonar.projectName=$artifactId " +
//                                "-Dsonar.projectVersion=$softwareGeneratedVersion " +
//                                "-Dsonar.projectKey=$artifactId " +
//                                "-Dsonar.java.binaries=$sonarJavaBinaries " +
//                                "-Dsonar.jacoco.reportPaths=$sonarJacocoReportPaths " +
//                                "-Dsonar.surefire.reportsPath=$sonarSurefireReportsPath " +
//                                "-Dsonar.exclusions=$sonarExclusions " +
//                                "-Dsonar.sourceEncoding=$sonarSourceEncoding " +
//                                "-Dsonar.host.url=$SONAR_HOST"
//                    }
//                    script {
//                        timeout(time: 10, unit: 'MINUTES') {
//                            def qualitygate = waitForQualityGate()
//                            if (qualitygate.status != 'OK') {
//                                stopBuildWithError("Failed sonar scan: ${qualitygate.status}")
//                            }
//                        }
//                    }
//                }
//            }
//            post {
//                always {
//                    archiveArtifacts artifacts: '**/target/*.jar, **/target/*.war', onlyIfSuccessful: true
//                }
//            }
//        }

        stage('Publish artifacts') {
            agent none
            steps {
                parallel(
                        "Push to artifactory": {
                            echo 'Pushing artifact $artifactId:$version to artifactory'
                            sh "mvn -f ./pom.xml deploy"
                        }
                )
            }
        }

        stage('Build') {
            steps {
                echo "Builds docker-image"
                sh "docker build --force-rm --no-cache -t $dockerRepository/$artifactId:latest -t $dockerRepository/$artifactId:$BUILD_NUMBER -t $dockerRepository/$artifactId:$version ."
            }


        }

        stage('Publish Docker-images') {
            agent none
            steps {
                parallel(
                        "Push to Docker Registry": {
                            echo 'Push docker-image $artifactId till Docker Repository'
                            sh "docker push $dockerRepository/$artifactId:latest"
                            sh "docker push $dockerRepository/$artifactId:$version"
                            sh "docker push $dockerRepository/$artifactId:$BUILD_NUMBER"
                            sh "docker rmi $dockerRepository/$artifactId:latest"
                            sh "docker rmi $dockerRepository/$artifactId:$version"
                            sh "docker rmi $dockerRepository/$artifactId:$BUILD_NUMBER"
                        }
                )
            }
        }
    }

    tools {
        maven 'Maven 3.5.0'
        jdk 'openjdk-1.8.0.171'
    }
}

void stopBuildWithError(message) {
    def lastPusherEmail = sh(
            script: 'git log --format="%ae" | head -1',
            returnStdout: true
    )
    def lastPusherFullname = sh(
            script: 'git log --format="%an" | head -1',
            returnStdout: true
    )
    def errorMessage = "The build did not pass. Last git push made by: $lastPusherFullname Other information: $message"
    email(lastPusherEmail, errorMessage)
    error errorMessage
}

void email(mailRecipient, message) {
    emailext body: "${message}",
            mimeType: 'text/html',
            subject: "${env.JOB_NAME} - $currentBuild.displayName",
            to: "${mailRecipient}",
            recipientProviders: [[$class: 'CulpritsRecipientProvider']]
}

def version() {
    def matcher = readFile('pom.xml') =~ '<version>(.+?)</version>'
    matcher ? matcher[0][1] : null
}
