#!groovy

final dockerRepository = "registry.valhalla-game.com"

pipeline {
    agent any

    stages {
        stage('Prepare') {
            steps {
                git(branch: "$BRANCH_NAME", url: scm.userRemoteConfigs[0].url)
                script {
                    gitCommit = sh(
                            script: 'git rev-parse HEAD',
                            returnStdout: true
                    ).trim().take(10)

                    gitDate = sh(
                            script: 'git show -s --format=%cd --date=short HEAD',
                            returnStdout: true
                    ).trim()

                    artifactId = readMavenPom(file: 'pom.xml').getArtifactId()
                    version = readMavenPom(file: 'pom.xml').getVersion()
                    serviceName = artifactId.replace("-server", "")
                    isProd = BRANCH_NAME == "master"

                    echo " ***** Build name:     $currentBuild.displayName"
                    echo " ***** Client Version: $version"

                    echo 'Environment Parameters:'
                    sh 'printenv'
                }
            }
        }

        stage('mvn install') {
            steps {
                sh "mvn -f ./pom.xml clean install"
            }
        }

        stage('Package artifact') {
            steps {
                sh "mvn -f ./pom.xml clean package --update-snapshots"
            }
        }

        stage('Build and publish docker images') {
            steps {
                script {
                    if(isProd) {
                        sh "mvn -f ./pom.xml docker:build -DpushImageTag=true -DdockerImageTags=release-$version"
                    } else {
                        sh "mvn -f ./pom.xml docker:build -DpushImageTag=true -DdockerImageTags=latest,v$BUILD_NUMBER"
                    }
                }
            }
        }

        stage('Deploy to rancher cluster') {
            steps {
                script {
                    if(isProd) {
                        withKubeConfig([credentialsId: 'kubeconfig-prod']) {
                            sh "kubectl set image -n default deployment/$serviceName $serviceName=$dockerRepository/$artifactId:release-$version"
                        }
                    } else {
                        withKubeConfig([credentialsId: 'kubeconfig-dev']) {
                            sh "kubectl set image -n default deployment/$serviceName $serviceName=$dockerRepository/$artifactId:v$BUILD_NUMBER"
                        }
                    }
                }
            }
        }
    }

    tools {
        maven 'Maven 3.5.0'
        jdk 'openjdk-1.8.0'
    }
}
